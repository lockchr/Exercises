Index: MerkleTree.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from hmac import digest\r\nfrom this import d\r\nfrom turtle import left\r\n\r\ndef build_root(self, iterable):\r\n  collection = list(iterable)\r\n  assert(len(collection) != 0)\r\n  if len(collection) % 2 != 0:\r\n    collection.append(collection[-1])\r\n  collection = [self.__Node(self.digest(x)) for x in collection]\r\n  return self.__build_root(collection)\r\n\r\ndef __build_root(self, collection):\r\n  size = len(collection)\r\n  if size == 1:\r\n    return collection[0]\r\n  if size % 2 == 0:\r\n    collection.append(self.__Node(collection[-1].value, left=collection[-1].left, right=collection[-1].right))\r\n  next_level = []\r\n  for i in range(0, size - 1, 2):\r\n    digest = self.digest(collection[i].value + collection[i + 1].value)\r\n    node =  self.__Node(digest, left=collection[i], right=collection[i+1])\r\n    next_level.append(node)\r\n  return self.__build_root(next_level)\r\n    \r\n    
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MerkleTree.py b/MerkleTree.py
--- a/MerkleTree.py	(revision 60d63ff5e510add7b16cafa5aaf69e8a43c2ff28)
+++ b/MerkleTree.py	(date 1661577030781)
@@ -2,25 +2,25 @@
 from this import d
 from turtle import left
 
+
 def build_root(self, iterable):
-  collection = list(iterable)
-  assert(len(collection) != 0)
-  if len(collection) % 2 != 0:
-    collection.append(collection[-1])
-  collection = [self.__Node(self.digest(x)) for x in collection]
-  return self.__build_root(collection)
+    collection = list(iterable)
+    assert (len(collection) != 0)
+    if len(collection) % 2 != 0:
+        collection.append(collection[-1])
+    collection = [self.__Node(self.digest(x)) for x in collection]
+    return self.__build_root(collection)
 
+
 def __build_root(self, collection):
-  size = len(collection)
-  if size == 1:
-    return collection[0]
-  if size % 2 == 0:
-    collection.append(self.__Node(collection[-1].value, left=collection[-1].left, right=collection[-1].right))
-  next_level = []
-  for i in range(0, size - 1, 2):
-    digest = self.digest(collection[i].value + collection[i + 1].value)
-    node =  self.__Node(digest, left=collection[i], right=collection[i+1])
-    next_level.append(node)
-  return self.__build_root(next_level)
-    
-    
\ No newline at end of file
+    size = len(collection)
+    if size == 1:
+        return collection[0]
+    if size % 2 == 0:
+        collection.append(self.__Node(collection[-1].value, left=collection[-1].left, right=collection[-1].right))
+    next_level = []
+    for i in range(0, size - 1, 2):
+        digest = self.digest(collection[i].value + collection[i + 1].value)
+        node = self.__Node(digest, left=collection[i], right=collection[i + 1])
+        next_level.append(node)
+    return self.__build_root(next_level)
Index: AES encryp example.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pydoc import plain\r\nfrom tokenize import PlainToken\r\nimport pyaes, pbkdf2, binascii, os, secrets\r\n\r\nplaintext = \"Sample text for Encryption\"\r\npassword = \"s0m3p@$$w0rd\"\r\nkey = pbkdf2.PBKDF2(password, 'some salt').read(16)\r\nprint('AES encryption key: ', binascii.hexlify(key))\r\n\r\niv = secrets.randbelow(2 << 128)\r\naes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))\r\nciphertext = aes.encrypt(plaintext)\r\nprint('encrypted: ', binascii.hexlify(ciphertext))\r\n\r\naes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))\r\ndecrypted = aes.decrypt(ciphertext)\r\nprint('decrypted: ', decrypted)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AES encryp example.py b/AES encryp example.py
--- a/AES encryp example.py	(revision 60d63ff5e510add7b16cafa5aaf69e8a43c2ff28)
+++ b/AES encryp example.py	(date 1661577969851)
@@ -1,6 +1,7 @@
-from pydoc import plain
-from tokenize import PlainToken
-import pyaes, pbkdf2, binascii, os, secrets
+import binascii
+import pbkdf2
+import pyaes
+import secrets
 
 plaintext = "Sample text for Encryption"
 password = "s0m3p@$$w0rd"
@@ -14,4 +15,4 @@
 
 aes = pyaes.AESModeOfOperationCTR(key, pyaes.Counter(iv))
 decrypted = aes.decrypt(ciphertext)
-print('decrypted: ', decrypted)
\ No newline at end of file
+print('decrypted: ', decrypted)
Index: Scrypt Key derivation example.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os, binascii\r\nfrom passlib.hash import scrypt\r\n\r\npasswd = \"p@$$w0rD~3\"\r\nsalt = os.urandom(32)\r\nprint(\"Salt: \", binascii.hexlify(salt))\r\n\r\nkey = scrypt.hash(passwd, salt, 16384, 8, 1, 32)\r\nprint(\"Derived key: \", binascii.hexlify(key))\r\n 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Scrypt Key derivation example.py b/Scrypt Key derivation example.py
--- a/Scrypt Key derivation example.py	(revision 60d63ff5e510add7b16cafa5aaf69e8a43c2ff28)
+++ b/Scrypt Key derivation example.py	(date 1661577969860)
@@ -1,10 +1,12 @@
-import os, binascii
+import binascii
+import os
+
 from passlib.hash import scrypt
 
 passwd = "p@$$w0rD~3"
 salt = os.urandom(32)
 print("Salt: ", binascii.hexlify(salt))
 
-key = scrypt.hash(passwd, salt, 16384, 8, 1, 32)
+key = scrypt.hash(passwd)
 print("Derived key: ", binascii.hexlify(key))
  
\ No newline at end of file
Index: HMAC Caluculation example.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import hashlib, hmac, binascii\r\n\r\ndef hmac_sha256(key, msg):\r\n  return hmac.new(key, msg, hashlib.sha256).digest()\r\n\r\nkey = binascii.unhexlify(\"fa63f2b4c85af6bed3\")\r\nmsg = \"some message\".encode(\"utf8\")\r\nprint(binascii.hexlify(hmac_sha256(key, msg))) 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HMAC Caluculation example.py b/HMAC Caluculation example.py
--- a/HMAC Caluculation example.py	(revision 60d63ff5e510add7b16cafa5aaf69e8a43c2ff28)
+++ b/HMAC Caluculation example.py	(date 1661577969841)
@@ -1,8 +1,12 @@
-import hashlib, hmac, binascii
+import binascii
+import hashlib
+import hmac
+
 
 def hmac_sha256(key, msg):
-  return hmac.new(key, msg, hashlib.sha256).digest()
+    return hmac.new(key, msg, hashlib.sha256).digest()
 
+
 key = binascii.unhexlify("fa63f2b4c85af6bed3")
 msg = "some message".encode("utf8")
-print(binascii.hexlify(hmac_sha256(key, msg))) 
\ No newline at end of file
+print(binascii.hexlify(hmac_sha256(key, msg)))
Index: PBKDF2 Key Derivation example.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os, binascii\r\nfrom backports.pbkdf2 import pbkdf2_hmac\r\n\r\nsalt = os.urandom(32)\r\npasswd = \"p@$$w0rD~3\".encode(\"utf8\")\r\nkey = pbkdf2_hmac(\"sha256\", passwd, salt, 500000, 32)\r\nprint(\"Derived key:\", binascii.hexlify(key))\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PBKDF2 Key Derivation example.py b/PBKDF2 Key Derivation example.py
--- a/PBKDF2 Key Derivation example.py	(revision 60d63ff5e510add7b16cafa5aaf69e8a43c2ff28)
+++ b/PBKDF2 Key Derivation example.py	(date 1661577969860)
@@ -1,4 +1,6 @@
-import os, binascii
+import binascii
+import os
+
 from backports.pbkdf2 import pbkdf2_hmac
 
 salt = os.urandom(32)
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1661576751052)
+++ b/.idea/vcs.xml	(date 1661576751052)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1661576751075)
+++ b/.idea/misc.xml	(date 1661576751075)
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1661576751084)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1661576751084)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1661576751173)
+++ b/.idea/.gitignore	(date 1661576751173)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: calculating_hash_functions.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/calculating_hash_functions.py b/calculating_hash_functions.py
new file mode 100644
--- /dev/null	(date 1661578394259)
+++ b/calculating_hash_functions.py	(date 1661578394259)
@@ -0,0 +1,14 @@
+import binascii
+import hashlib
+
+text = 'hello'
+data = text.encode("utf8")
+
+sha256hash = hashlib.sha256(data).digest()
+print("SHA256: ", binascii.hexlify(sha256hash))
+
+sha3_256 = hashlib.sha3_256(data).digest()
+print("SHA3-256: ", binascii.hexlify(sha3_256))
+
+ripemd160 = hashlib.new('ripemd160', data).digest()
+print("RIPEMD-160: ", binascii.hexlify(ripemd160))
Index: .idea/Exercises.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Exercises.iml b/.idea/Exercises.iml
new file mode 100644
--- /dev/null	(date 1661576751037)
+++ b/.idea/Exercises.iml	(date 1661576751037)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1661576751050)
+++ b/.idea/modules.xml	(date 1661576751050)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Exercises.iml" filepath="$PROJECT_DIR$/.idea/Exercises.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
